/*
   Copyright 2011 Jose Maria Arranz Santamaria

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package jepl.impl.jta;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.Connection;
import java.sql.SQLException;
import javax.transaction.RollbackException;
import javax.transaction.SystemException;
import javax.transaction.Transaction;
import javax.transaction.TransactionManager;
import javax.transaction.xa.XAResource;
import jepl.JEPLException;
import jepl.impl.JEPLDALImpl;
import jepl.impl.JEPLPreparedStatementImpl;

/**
 *
 * @author jmarranz
 */
public class JEPLJTAConnectionXAPoolImpl extends JEPLJTAConnectionImpl
{
    static Class standardXAConnectionHandleClass;
    static Class standardXAConnection;
    static Field field_tx;
    static Field field_transactionManager;
    static Field field_xacon;
    static Field field_xacon_thisAutoCommit;  
    static Method method_xacon_getXAResource;      
    static Method method_getAutoCommit;
    static Method method_setAutoCommit;
        
    static
    {
        initReflection();
    }

    protected boolean isStandardXAConnectionHandle;

    public JEPLJTAConnectionXAPoolImpl(JEPLJTADataSourceDefaultImpl ds,Connection con)
    {
        super(ds,con);

        // Por si acaso aunque ser√° seguro
        if (standardXAConnectionHandleClass != null)
            this.isStandardXAConnectionHandle = con.getClass().isAssignableFrom(standardXAConnectionHandleClass);
    }

    @SuppressWarnings("unchecked")
    private static void initReflection()
    {
        try
        {
            standardXAConnectionHandleClass = Class.forName("org.enhydra.jdbc.standard.StandardXAConnectionHandle");
            standardXAConnection = Class.forName("org.enhydra.jdbc.standard.StandardXAConnection");

            field_tx = standardXAConnectionHandleClass.getField("tx");
            field_transactionManager = standardXAConnectionHandleClass.getField("transactionManager");
            field_xacon = standardXAConnectionHandleClass.getField("xacon");
            field_xacon_thisAutoCommit = standardXAConnection.getField("thisAutoCommit");
            method_xacon_getXAResource = standardXAConnection.getMethod("getXAResource",(Class<Object>[])null);
            method_getAutoCommit = standardXAConnectionHandleClass.getMethod("getAutoCommit",(Class<?>[])null);
            method_setAutoCommit = standardXAConnectionHandleClass.getMethod("setAutoCommit",new Class[]{boolean.class});
        }
        catch(Exception ex)
        {
            throw new JEPLException(ex);
        }
    }
    
    @Override
    public JEPLPreparedStatementImpl prepareJEPLStatement(JEPLDALImpl dal,String sql,int autoGeneratedKeys) throws SQLException
    {
        if (isStandardXAConnectionHandle) fixXAPool();
        return super.prepareJEPLStatement(dal,sql,autoGeneratedKeys);
    }

    public void fixXAPool() throws SQLException
    {
        // http://stackoverflow.com/questions/6927561/standardxaconnectionhandlepreparestatement-should-not-be-used-outside-an-ejbser
        // http://www.java2s.com/Open-Source/Java-Document/Database-JDBC-Connection-Pool/xapool/org/enhydra/jdbc/standard/StandardXAConnectionHandle.java.htm
        // http://websvn.ow2.org/filedetails.php?repname=xapool&path=%2Ftrunk%2Fxapool%2Fsrc%2Forg%2Fenhydra%2Fjdbc%2Fstandard%2FStandardXAConnectionHandle.java

        Connection con = getConnection();

        // Usando reflection evitamos dependencias con JOTM
        try
        {
            // StandardXAConnectionHandle jotmCon = (StandardXAConnectionHandle)con;

            if (field_tx.get(con) == null) // jotmCon.tx == null
            {
                TransactionManager txnMgr = (TransactionManager)field_transactionManager.get(con); // TransactionManager txnMgr = jotmCon.transactionManager;
                Transaction tx = txnMgr.getTransaction();

                if (tx != null)
                {
                    field_tx.set(con,tx);  // jotmCon.tx = tx;
                    boolean autoCommit = (Boolean)method_getAutoCommit.invoke(con, (Object[])null); // boolean autoCommit = jotmCon.getAutoCommit();
                    Object xacon = field_xacon.get(con); // StandardXAConnection xacon = jotmCon.xacon;
                    field_xacon_thisAutoCommit.set(xacon,autoCommit); // xacon.thisAutoCommit = autoCommit;
                    if (autoCommit)
                        method_setAutoCommit.invoke(con,false); // jotmCon.setAutoCommit(false);
                    tx.enlistResource((XAResource)method_xacon_getXAResource.invoke(xacon,(Object[])null)); // tx.enlistResource(xacon.getXAResource());
                }
            }
        }
        catch (RollbackException ex1)
        {
            throw new JEPLException(ex1);
        }
        catch (IllegalStateException ex1)
        {
            throw new JEPLException(ex1);
        }
        catch (SystemException ex1)
        {
           throw new JEPLException(ex1);
        }
        catch (IllegalAccessException ex1)
        {
            throw new JEPLException(ex1);
        }
        catch (InvocationTargetException ex1)
        {
            throw new JEPLException(ex1);
        }
    }

}
